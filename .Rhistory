install.packages("easypackages")
library("easypackages")
my_pkgs <- c("markovchain", "msm", 'tidyverse', "ggplot2", "gridExtra")
easypackages::packages(my_pkgs)
easypackages::libraries(my_pkgs)
my_pkgs <- append(x = my_pkgs, values = c('easypackages'))
source(here::here('functions/square_mats.R'))
source(here::here('functions/plot_mtm.R'))
source(here::here('functions/update_mtm_selection.R'))
source(here::here('functions/mtms.R'))
source(here::here('functions/open_sim.R'))
synthetic_data <- readRDS(file = './data/icr_data.RDS')  #read the data
paid_data <- synthetic_data %>%
dplyr::select(ClNr:RepDel, dplyr::starts_with('Pay')) %>% #keep IDs and payment amounts
tidyr::pivot_longer(cols = Pay00:Pay11, names_to = 'paid_as_of', #wide to long
values_to = 'paid') %>%
dplyr::mutate(maturity = stringr::str_extract(string = paid_as_of, #extract maturity
pattern = '[0-9]{2}')) %>%
#calculate cumulative payments
dplyr::group_by(ClNr) %>% mutate(cum_paid = cumsum(paid)) %>%
dplyr::select(-paid)
status_data <- synthetic_data %>%  #read the data
dplyr::select(ClNr:RepDel, dplyr::starts_with('Open')) %>% #keep IDs and status
tidyr::pivot_longer(cols = Open00:Open11, names_to = 'status_as_of', #wide to long
values_to = 'status') %>%
dplyr::mutate(maturity = stringr::str_extract(string = status_as_of, #extract maturity
pattern = '[0-9]{2}'))
markov_data <- dplyr::left_join(paid_data, status_data) %>% #join paid and status data
dplyr::select(- c(paid_as_of, status_as_of, LoB, age, cc, AY,
AQ, inj_part, RepDel)) %>%  #remove fields not used
dplyr::mutate(maturity = as.numeric(maturity) + 1) %>%
dplyr::arrange(ClNr, maturity) %>%
dplyr::mutate(mc_status = case_when( #create Markov states decided on in Section 2.1
cum_paid == 0 & status == 1 ~ "oz", #open zero
cum_paid > 0 & status == 1 ~ "onz", #open non-zero
cum_paid == 0 & status == 0 ~ "cz", #closed zero
cum_paid > 0 & status == 0 ~ "cnz", #closed non-zero
TRUE ~ "NA")) %>%
dplyr::mutate(
mc_subject = ClNr, #define variables for markovchain package
mat_ymyp1 = maturity) %>% # maturity calculated as year minus year plus 1
dplyr::arrange(mc_subject, mat_ymyp1) %>%
dplyr::ungroup()
markov_states <- c('oz', 'onz', 'cz', 'cnz') #define states
rm(paid_data, status_data, synthetic_data) #cleanup
markov_data %>%
dplyr::filter(ClNr == 36)
transitions <- unique(markov_data$mat_ymyp1) %>% sort() #define transitions
transitions <- transitions[1:length(transitions) - 1]
mtms <- lapply(X = transitions, # all available transitions,
create_mtms)
mtms[[1]] # to show
term_mat <- expand.grid(from = markov_states, to = markov_states) %>%
dplyr::mutate(n = case_when(
from == 'oz' & to == 'cz' ~ 1,
from == 'onz' & to == 'cnz' ~ 1,
from == 'cz' & to == 'cz' ~ 1,
from == 'cnz' & to == 'cnz' ~ 1,
TRUE ~ 0
))
square_term <- xtabs(n ~ from + to, data = term_mat)[c('cnz', 'cz', 'onz', 'oz'), c('cnz', 'cz', 'onz', 'oz')]
class(square_term) <- "table"
mtm_selections <- lapply(mtms, function(mtm){
mtm_prop <- (mtm %>% prop.table(margin = 1))
return(mtm_prop)
})
mtm_selections[[length(mtm_selections) + 1]] <- square_term
rm(term_mat, square_term)
mtms[[1]]
mtm_selections[[1]]
mtm_selections[[6]] <- update_mtm_selection(mtm_selections[[6]],
from = 'oz', to = 'onz', selection = .4)
mtm_selections[[6]] <- update_mtm_selection(mtm_selections[[6]],
from = 'oz', to = 'oz', selection = .6)
#Transition 7 - 8
mtm_selections[[7]] <- update_mtm_selection(mtm_selections[[7]],
from = 'oz', to = 'onz', selection = .2)
mtm_selections[[7]] <- update_mtm_selection(mtm_selections[[7]],
from = 'oz', to = 'oz', selection = .8)
mtm_selections[[1]] <- update_mtm_selection(mtm_selections[[1]],
from = 'oz', to = 'cz', selection = 0.02)
mtm_selections[[1]] <- update_mtm_selection(mtm_selections[[1]],
from = 'oz', to = 'cnz', selection = 0.82)
mtm_selections[[1]] <- update_mtm_selection(mtm_selections[[1]],
from = 'oz', to = 'oz', selection = 0.04)
mtm_selections[[1]] <- update_mtm_selection(mtm_selections[[1]],
from = 'oz', to = 'onz', selection = .12)
lapply(X = 1:6, FUN = function(x){
print(paste('transition = ', x, 'to', x + 1))
plot_mtm(x)
} ) %>% invisible()
mtm_selections <- lapply(mtm_selections, function(x){
as(object = x, Class = "markovchain")
})
rm(markov_data)
paid_data <- readRDS(file = './data/icr_data.RDS') %>%  #read the data
dplyr::select(ClNr:RepDel, dplyr::starts_with('Pay')) %>% #keep IDs and payment amounts
tidyr::pivot_longer(cols = Pay00:Pay11, names_to = 'paid_as_of', #wide to long
values_to = 'paid') %>%
dplyr::mutate(maturity = stringr::str_extract(string = paid_as_of, #extract maturity
pattern = '[0-9]{2}'))
status_data <- readRDS(file = './data/icr_data.RDS') %>%  #read the data
dplyr::select(ClNr:RepDel, dplyr::starts_with('Open')) %>% #keep IDs and status
tidyr::pivot_longer(cols = Open00:Open11, names_to = 'status_as_of', #wide to long
values_to = 'status') %>%
dplyr::mutate(maturity = stringr::str_extract(string = status_as_of, #extract maturity
pattern = '[0-9]{2}'))
model_data <- dplyr::left_join(paid_data, status_data) %>%  #combine data
dplyr::select(-paid_as_of, -status_as_of) %>% #drop variables not needed
dplyr::mutate(maturity = as.numeric(maturity) + 1) %>% #calculate maturity
dplyr::arrange(ClNr, maturity) %>%
dplyr::mutate(last_open = maturity * status) %>% #this in an intermediate step
dplyr::group_by(ClNr) %>%
dplyr::mutate(ultimate = sum(paid)) %>%
dplyr::filter(ultimate > 0) %>%
dplyr::mutate(closed_at = max(last_open) + 1) %>%
dplyr::mutate(cum_paid = cumsum(paid)) %>%
dplyr::select(-AQ, -cc, -inj_part, -LoB, -last_open, -age) %>%
#drop unnecessary variables
#AQ is the quarter of claims occurrence
#cc is the claims code
#inj_part is the body part injured
#age is the age of the claimant
dplyr::mutate(lag_to_close = closed_at - maturity) %>%
dplyr::ungroup()
rm(paid_data, status_data)
sev_model <- model_data %>%
dplyr::filter(maturity < closed_at)
severity_eda <- function(df, closing_lag){
plot_data <- df %>%
dplyr::filter(lag_to_close == closing_lag)
plot(x = log(plot_data$cum_paid), xlab = 'log(claims_paid)',
y = log(plot_data$ultimate), ylab = 'log(setttelement value)',
main = paste('Closing Lag = ', closing_lag))
lines(x = plot_data$cum_paid, y = plot_data$cum_paid, col = 'red')
legend('bottomright', legend = c('No Additional Payments'), col = 'red',  bty = 'n', lty = 'solid', cex = 0.7)
}
par(mfrow = c(1, 2))
severity_eda(df = sev_model, closing_lag = 2)
severity_eda(df = sev_model, closing_lag = 7)
severity_model_df <- tibble::tibble(
lag_to_close = unique(sev_model$lag_to_close) %>% sort())
par(mfrow = c(3, 4))
closed_at_current <- lapply(X = severity_model_df$lag_to_close,
FUN = function(closing_lag){
add_pay_model <- sev_model %>%
dplyr::filter(lag_to_close == closing_lag) %>% #for loop
dplyr::mutate(no_add_pay = ultimate == cum_paid) %>%
dplyr::mutate(size_cat = dplyr::ntile(x = cum_paid, n = 10)) %>%
dplyr::group_by(lag_to_close, size_cat) %>%
dplyr::summarise(no_add_pay_rate = mean(no_add_pay),
layer_start = min(cum_paid)) %>%
dplyr::ungroup()
plot(x = 1:10, #deciles
y = 1:10 * 0.10 - 0.05,
ylim = c(0,1), type = 'n', ylab = "Addional Payment Rate",
main = paste('Closing Lag = ', closing_lag) )
lines(x = add_pay_model$size_cat, y = add_pay_model$no_add_pay_rate,
type = 'b')
return(add_pay_model)
}) %>% invisible()
severity_model_df <- severity_model_df %>%
dplyr::mutate(no_add_pay = closed_at_current)
rm(closed_at_current)
nz_dev_model <- model_data %>%
dplyr::filter(ultimate > cum_paid) %>%
dplyr::filter(cum_paid > 0)
nz_closing_lags <-  unique(nz_dev_model$lag_to_close) %>% sort()
par(mfrow = c(1, 2))
lapply(X = c(2, 7), FUN = function(closing_lag){
plot_data <- nz_dev_model %>%
dplyr::filter(lag_to_close == closing_lag) #for loop
plot(x = log(plot_data$cum_paid), xlab = 'log(claims_paid)',
y = log(plot_data$ultimate), ylab = 'log(setttelement value)',
main = paste('Closing Lag = ', closing_lag))
lines(x = plot_data$cum_paid, y = plot_data$cum_paid, col = 'red')
}) %>% invisible()
plot_data <- nz_dev_model %>%
dplyr::filter(lag_to_close == 2)
plot(x = log(plot_data$cum_paid), xlab = 'log(claims_paid)',
y = log(plot_data$ultimate), ylab = 'log(setttelement value)',
main = paste('Closing Lag = ', 2))
lines(x = log(plot_data$cum_paid), y = log(plot_data$cum_paid), col = 'red')
abline(v = 10, col = 'red')
sev_model_lt10 <- glm(formula = log(ultimate) ~ log(cum_paid),
data = plot_data, family = Gamma(link = 'identity'),
subset = log(cum_paid) < 10)
points(x = log(plot_data$cum_paid)[log(plot_data$cum_paid) < 10],
y = predict(object = sev_model_lt10), col = 'blue', type = 'l')
sev_model_gt10 <- lm(formula = log(ultimate) ~ log(cum_paid),
data = plot_data, subset = log(cum_paid) >= 10)
points(x = log(plot_data$cum_paid)[log(plot_data$cum_paid) >= 10],
y = predict(object = sev_model_gt10), col = 'green', type = 'l')
rm(plot_data)
nz_lt_10 <- lapply(X = nz_closing_lags, FUN = function(closing_lag){
model_data <- nz_dev_model %>%
dplyr::filter(lag_to_close == closing_lag)
sev_model_lt10 <- glm(formula = log(ultimate) ~ log(cum_paid),
data = model_data, family = Gamma(link = 'identity'),
subset = log(cum_paid) < 10)
}) %>% invisible()
severity_model_df$nz_lt_10 <- nz_lt_10
nz_gt_10 <- lapply(X = nz_closing_lags, FUN = function(closing_lag){
model_data <- nz_dev_model %>%
dplyr::filter(lag_to_close == closing_lag)
lm(formula = log(ultimate) ~ log(cum_paid),
data = model_data, subset = log(cum_paid) >= 10)
}) %>% invisible()
severity_model_df$nz_gt_10 <- nz_gt_10
rm(sev_model_gt10, sev_model_lt10, nz_dev_model, nz_gt_10, nz_lt_10)
z_dev_model <- model_data %>%
dplyr::filter(ultimate > cum_paid) %>%
dplyr::filter(cum_paid == 0)
z_closing_lags <- unique(z_dev_model$lag_to_close) %>% sort()
z_dev <- lapply(X = z_closing_lags, FUN = function(lag){
z_dev_model %>%
dplyr::filter(lag_to_close == lag) %>%
dplyr::pull(ultimate) %>%
log()
}) %>% invisible()
severity_model_df$z_dev <- z_dev
lapply(X = 1:4, FUN = function(lag){
z_dev_model %>%
dplyr::filter(lag_to_close == lag) %>%
dplyr::pull(ultimate) %>%
log() %>%
hist(main = paste('closing lag = ', lag), xlab = 'log(settlement value)')
}) %>% invisible()
rm(sev_model, model_data, z_dev, z_dev_model)
test_data <- dplyr::left_join(
readRDS(file = './data/icr_data.RDS') %>%
dplyr::select(ClNr:RepDel, dplyr::starts_with('Pay')) %>% #keep IDs and payment amounts
tidyr::pivot_longer(cols = Pay00:Pay11, names_to = 'paid_as_of', #wide to long
values_to = 'paid') %>%
dplyr::mutate(maturity = stringr::str_extract(string = paid_as_of, #extract maturity
pattern = '[0-9]{2}')) %>%
dplyr::mutate(maturity = as.numeric(maturity) + 1) %>%
mutate(cal_year = AY + maturity - 1) %>%
#calculate cumulative payments
dplyr::group_by(ClNr, AY) %>%
mutate(cum_paid = cumsum(paid)),
readRDS(file = './data/icr_data.RDS') %>%
dplyr::select(ClNr:RepDel, dplyr::starts_with('Open')) %>% #keep IDs and payment amounts
tidyr::pivot_longer(cols = Open00:Open11, names_to = 'open_as_of', #wide to long
values_to = 'status') %>%
dplyr::mutate(maturity = stringr::str_extract(string = open_as_of, #extract maturity
pattern = '[0-9]{2}')) %>%
dplyr::mutate(maturity = as.numeric(maturity) + 1) %>%
mutate(cal_year = AY + maturity - 1) %>%
dplyr::mutate(status_year = status * cal_year) %>%
#calculate cumulative payments
dplyr::group_by(ClNr, AY) %>%
mutate(last_open = max(status_year)) %>%
dplyr::select(-status_year)
)
val_date <- 2005
settle_sim_test <- test_data %>%
dplyr::filter(cal_year == val_date) %>%
dplyr::mutate(mtm_code = case_when(
status == 1 & cum_paid == 0 ~ "oz",
status == 1 & cum_paid > 0 ~ "onz",
status == 0 & cum_paid == 0 ~ "cz",
status == 0 & cum_paid > 0 ~ "cnz",)) %>% #assign mtm_code
dplyr::mutate(
mtm_code_with_mat = paste(mtm_code, maturity, sep = '_'))
set.seed(14159) #for reproducibility
my_iters = 100
last_mat = 12 #last maturity
sim_claims <- settle_sim_test
state_sims <- lapply(X = sim_claims$ClNr, FUN = claims_simulation, last_mat)
names(state_sims) <- paste0('claim_', sim_claims$ClNr)
rm(last_mat, sim_claims)
state_sims$claim_5489[1:20,]
state_sims$claim_5489
state_sims$claim_5489[1:5,]
state_sims$claim_5489[1:5]
state_sims$claim_5801[1:5, 5]
state_sims$claim_5801[1:5]
state_sims$claim_5801[5]
state_sims$claim_5801[1:20]
state_sims$claim_5801[1:20, 5]
summary
table(state_sims$claim_5801[1:20])
state_sims$claim_5801[1:20]
state_sims$claim_5801[1:11]
lapply(state_sims$claim_5801, '[', 4,)
lapply(state_sims$claim_5801, '[', 1,)
lapply(state_sims$claim_5801, 1,)
state_sims[1]
state_sims[2000]
state_sims[6000]
state_sims[6001]
head(state_sims[6001])
head(state_sims[6001], 5)
